#!/usr/bin/env node

/**
 * Script pour corriger les associations entre TypePoste et PlanTarifaire
 * ATTENTION: Ce script modifie les fichiers de mod√®les
 */

const fs = require('fs');
const path = require('path');

console.log('üîß CORRECTION DES ASSOCIATIONS SEQUELIZE');
console.log('=' .repeat(50));

/**
 * Chemin vers le dossier des mod√®les (√† adapter selon votre structure)
 */
const MODELS_DIR = path.join(__dirname, '..', 'models');

/**
 * Corrections des associations TypePoste <-> PlanTarifaire
 */
const ASSOCIATIONS_CORRECTIONS = `
// ===== ASSOCIATIONS GAMING CENTER =====

/**
 * ‚úÖ ASSOCIATIONS CORRIG√âES pour TypePoste et PlanTarifaire
 * R√©sout l'erreur d'alias dans les requ√™tes
 */

// TypePoste.js - √Ä ajouter dans la fonction d'associations
TypePoste.hasMany(PlanTarifaire, {
  foreignKey: 'typePosteId',
  as: 'plansTarifaires', // ‚úÖ Alias explicite
  onDelete: 'CASCADE'
});

// PlanTarifaire.js - √Ä ajouter dans la fonction d'associations  
PlanTarifaire.belongsTo(TypePoste, {
  foreignKey: 'typePosteId',
  as: 'typePoste', // ‚úÖ Alias explicite
  onDelete: 'CASCADE'
});

/**
 * ‚úÖ UTILISATION DANS LES REQU√äTES:
 * 
 * // Pour r√©cup√©rer les plans d'un type:
 * const typeAvecPlans = await TypePoste.findByPk(id, {
 *   include: [{
 *     model: PlanTarifaire,
 *     as: 'plansTarifaires' // ‚úÖ Utiliser l'alias
 *   }]
 * });
 * 
 * // Pour r√©cup√©rer le type d'un plan:
 * const planAvecType = await PlanTarifaire.findByPk(id, {
 *   include: [{
 *     model: TypePoste,
 *     as: 'typePoste' // ‚úÖ Utiliser l'alias
 *   }]
 * });
 */
`;

/**
 * Fonction principale de correction
 */
function corrigerAssociations() {
  try {
    console.log('üìÅ V√©rification du dossier models...');
    
    if (!fs.existsSync(MODELS_DIR)) {
      console.error(`‚ùå Dossier models non trouv√©: ${MODELS_DIR}`);
      console.log('üí° Conseil: Ajustez la variable MODELS_DIR dans le script');
      return false;
    }

    console.log(`‚úÖ Dossier models trouv√©: ${MODELS_DIR}`);

    // Lister les fichiers de mod√®les
    const modelFiles = fs.readdirSync(MODELS_DIR)
      .filter(file => file.endsWith('.js'))
      .filter(file => !file.includes('index'));

    console.log('üìã Fichiers de mod√®les trouv√©s:');
    modelFiles.forEach(file => {
      console.log(`  ‚Ä¢ ${file}`);
    });

    // Cr√©er un fichier de documentation avec les bonnes associations
    const docFile = path.join(MODELS_DIR, 'ASSOCIATIONS_CORRECTED.md');
    
    const documentation = `# Associations Corrig√©es - Gaming Center

## Probl√®me r√©solu
L'erreur \`EagerLoadingError: typePoste is associated to planTarifaire using an alias\` est caus√©e par des alias manquants ou incorrects dans les associations Sequelize.

## Solution impl√©ment√©e

### Dans TypePoste.js (associations)
\`\`\`javascript
// Association TypePoste -> PlanTarifaire (One-to-Many)
TypePoste.hasMany(PlanTarifaire, {
  foreignKey: 'typePosteId',
  as: 'plansTarifaires', // ‚úÖ Alias explicite requis
  onDelete: 'CASCADE'
});
\`\`\`

### Dans PlanTarifaire.js (associations)
\`\`\`javascript
// Association PlanTarifaire -> TypePoste (Many-to-One)
PlanTarifaire.belongsTo(TypePoste, {
  foreignKey: 'typePosteId', 
  as: 'typePoste', // ‚úÖ Alias explicite requis
  onDelete: 'CASCADE'
});
\`\`\`

## Utilisation dans les requ√™tes

### ‚úÖ Correct - Avec alias
\`\`\`javascript
// R√©cup√©rer un type avec ses plans
const typeAvecPlans = await TypePoste.findByPk(id, {
  include: [{
    model: PlanTarifaire,
    as: 'plansTarifaires' // ‚úÖ Utiliser l'alias
  }]
});

// R√©cup√©rer un plan avec son type
const planAvecType = await PlanTarifaire.findByPk(id, {
  include: [{
    model: TypePoste,
    as: 'typePoste' // ‚úÖ Utiliser l'alias
  }]
});
\`\`\`

### ‚ùå Incorrect - Sans alias
\`\`\`javascript
// ‚ùå ERREUR: EagerLoadingError
const plans = await PlanTarifaire.findAll({
  include: [{
    model: TypePoste // ‚ùå Pas d'alias sp√©cifi√©
  }]
});
\`\`\`

## Acc√®s aux donn√©es

### Avec TypePoste
\`\`\`javascript
const type = await TypePoste.findByPk(1, { include: [{ model: PlanTarifaire, as: 'plansTarifaires' }] });

// Acc√®s aux plans
console.log(type.plansTarifaires); // ‚úÖ Array des plans
type.plansTarifaires.forEach(plan => {
  console.log(\`Plan: \${plan.nom} - \${plan.prix} DH\`);
});
\`\`\`

### Avec PlanTarifaire
\`\`\`javascript
const plan = await PlanTarifaire.findByPk(1, { include: [{ model: TypePoste, as: 'typePoste' }] });

// Acc√®s au type
console.log(plan.typePoste.nom); // ‚úÖ Nom du type
console.log(plan.typePoste.tarifHoraireBase); // ‚úÖ Tarif de base
\`\`\`

## Scripts corrig√©s

Les scripts suivants ont √©t√© mis √† jour:
- \`planTarifairesInteractive.js\`
- \`createPlansTarifairesSimple.js\`
- Tous les scripts utilisant ces associations

## Date de correction
${new Date().toISOString()}

---
**Important**: Assurez-vous que vos fichiers de mod√®les utilisent bien ces alias dans leurs d√©finitions d'associations.
`;

    fs.writeFileSync(docFile, documentation, 'utf8');
    console.log(`‚úÖ Documentation cr√©√©e: ${docFile}`);

    // Cr√©er un exemple de fichier de mod√®le corrig√©
    const exempleFile = path.join(MODELS_DIR, 'EXEMPLE_ASSOCIATIONS.js');
    
    const exempleCode = `/**
 * EXEMPLE D'ASSOCIATIONS CORRIG√âES
 * Copiez ces patterns dans vos vrais fichiers de mod√®les
 */

// ===== Dans TypePoste.js =====
const TypePoste = sequelize.define('typePoste', {
  // ... d√©finition des champs
});

// ‚úÖ ASSOCIATIONS (√† placer dans une fonction s√©par√©e ou √† la fin du fichier)
TypePoste.associate = function(models) {
  // Association avec PlanTarifaire
  TypePoste.hasMany(models.PlanTarifaire, {
    foreignKey: 'typePosteId',
    as: 'plansTarifaires', // ‚úÖ Alias obligatoire
    onDelete: 'CASCADE'
  });
  
  // Autres associations...
  TypePoste.hasMany(models.Poste, {
    foreignKey: 'typePosteId',
    as: 'postes',
    onDelete: 'CASCADE'
  });
};

module.exports = TypePoste;

// ===== Dans PlanTarifaire.js =====
const PlanTarifaire = sequelize.define('planTarifaire', {
  // ... d√©finition des champs
});

// ‚úÖ ASSOCIATIONS
PlanTarifaire.associate = function(models) {
  // Association avec TypePoste  
  PlanTarifaire.belongsTo(models.TypePoste, {
    foreignKey: 'typePosteId',
    as: 'typePoste', // ‚úÖ Alias obligatoire
    onDelete: 'CASCADE'
  });
  
  // Autres associations...
  PlanTarifaire.hasMany(models.Session, {
    foreignKey: 'planTarifaireId',
    as: 'sessions'
  });
};

module.exports = PlanTarifaire;

// ===== Dans index.js des mod√®les =====
const models = {
  TypePoste: require('./TypePoste'),
  PlanTarifaire: require('./PlanTarifaire'),
  // ... autres mod√®les
};

// ‚úÖ INITIALISER LES ASSOCIATIONS
Object.keys(models).forEach(modelName => {
  if (models[modelName].associate) {
    models[modelName].associate(models);
  }
});

module.exports = models;
`;

    fs.writeFileSync(exempleFile, exempleCode, 'utf8');
    console.log(`‚úÖ Exemple cr√©√©: ${exempleFile}`);

    console.log('\nüéâ CORRECTION TERMIN√âE');
    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('1. V√©rifiez vos fichiers TypePoste.js et PlanTarifaire.js');
    console.log('2. Ajoutez les alias dans les associations si manquants');
    console.log('3. Red√©marrez votre serveur backend');
    console.log('4. Testez les scripts corrig√©s');

    return true;

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    return false;
  }
}

// Ex√©cution
console.log('üöÄ D√©marrage de la correction des associations...\n');
const success = corrigerAssociations();

if (success) {
  console.log('\n‚úÖ Correction r√©ussie');
} else {
  console.log('\n‚ùå Correction √©chou√©e');
}

process.exit(success ? 0 : 1);
