import { api } from '../api/apiService';

class AbonnementService {
  /**
   * R√©cup√©rer tous les abonnements avec infos client et type d'abonnement
   * @param {Object} params - Param√®tres de la requ√™te (filtres, pagination, inclusions)
   * @returns {Promise<Object>} Liste des abonnements et pagination
   */
  async getAllAbonnements(params = {}) {
    try {
      console.log('üéØ [ABONNEMENT_SERVICE] R√©cup√©ration abonnements:', params);
      
      // ‚úÖ S'assurer que les infos client sont incluses par d√©faut
      const queryParams = {
        ...params,
        includeClient: params.includeClient !== false, // true par d√©faut
        includeTypeAbonnement: params.includeTypeAbonnement !== false
      };
      
      const response = await api.get('/abonnements', { params: queryParams });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnements r√©cup√©r√©s:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur r√©cup√©ration abonnements:', error);
      throw error;
    }
  }

  /**
   * Vendre un abonnement - Processus complet
   * @param {Object} abonnementData - Donn√©es de l'abonnement √† vendre
   * @returns {Promise<Object>} Abonnement cr√©√©
   */

  async vendreAbonnement(abonnementData) {
    try {
      console.log('üí∞ [ABONNEMENT_SERVICE] Vente abonnement:', abonnementData);
      
      // ‚úÖ Validation des donn√©es obligatoires
      if (!abonnementData.clientId || isNaN(parseInt(abonnementData.clientId))) {
        throw new Error('ID client invalide ou manquant');
      }

      if (!abonnementData.typeAbonnementId || isNaN(parseInt(abonnementData.typeAbonnementId))) {
        throw new Error('ID de type d\'abonnement invalide ou manquant');
      }

      // ‚úÖ Pr√©parer les donn√©es proprement
      const cleanData = {
        clientId: parseInt(abonnementData.clientId),
        typeAbonnementId: parseInt(abonnementData.typeAbonnementId),
        dateAchat: abonnementData.dateAchat || new Date().toISOString(),
        dateDebutValidite: abonnementData.dateDebutValidite || abonnementData.dateDebut || new Date().toISOString(),
        modePaiement: abonnementData.modePaiement || 'ESPECES',
        reductionPromo: parseFloat(abonnementData.reductionPromo) || 0,
        montantPaye: parseFloat(abonnementData.montantPaye) || 0,
        estPaye: Boolean(abonnementData.estPaye !== false), // true par d√©faut
        notes: abonnementData.notes?.trim() || '',
        sourceAchat: abonnementData.sourceAchat || 'MANUEL'
      };

      console.log('‚úÖ [ABONNEMENT_SERVICE] Donn√©es nettoy√©es:', cleanData);

      const response = await api.post('/abonnements/vendre', cleanData);
       console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnement vendu:', response);
      
      return response.data;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur vente abonnement:', error);
      throw error;
    }
  }

  /**
   * Calculer le prix pr√©visionnel d'un abonnement
   * @param {Object} data - { typeAbonnementId, reductionPromo }
   * @returns {Promise<Object>} D√©tails du prix calcul√©
   */
  async calculerPrixAbonnement({ typeAbonnementId, reductionPromo = 0 }) {
    try {
      console.log('üßÆ [ABONNEMENT_SERVICE] Calcul prix abonnement:', { typeAbonnementId, reductionPromo });
      
      // ‚úÖ Validation des param√®tres
      if (!typeAbonnementId || isNaN(parseInt(typeAbonnementId))) {
        throw new Error('ID de type d\'abonnement invalide');
      }

      // ‚úÖ Utiliser GET avec query parameters au lieu de POST
      const response = await api.get('/abonnements/calculer-prix', {
        params: {
          typeAbonnementId: parseInt(typeAbonnementId),
          reductionPromo: parseFloat(reductionPromo) || 0
        }
      });
      
      console.log('‚úÖ [ABONNEMENT_SERVICE] Prix calcul√©:', response);
      return response.data;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur calcul prix:', error);
      throw error;
    }
  }

  /**
   * Changer le statut d'un abonnement
   * @param {number} id - ID de l'abonnement
   * @param {string} statut - Nouveau statut (ACTIF, SUSPENDU, EXPIRE, EPUIS√â, ANNULE)
   * @returns {Promise<Object>} Abonnement mis √† jour
   */
  async changerStatutAbonnement(id, statut) {
    try {
      console.log(`üîÑ [ABONNEMENT_SERVICE] Changement statut abonnement ID: ${id} vers ${statut}`);
      const response = await api.patch(`/abonnements/${id}/statut`, { statut });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Statut abonnement mis √† jour:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur changement statut abonnement:', error);
      throw error;
    }
  }

  /**
   * Annuler un abonnement
   * @param {number} id - ID de l'abonnement √† annuler
   * @returns {Promise<Object>} Message de succ√®s
   */
  async annulerAbonnement(id) {
    try {
      console.log(`üö´ [ABONNEMENT_SERVICE] Annulation abonnement ID: ${id}`);
      const response = await api.patch(`/abonnements/${id}/annuler`);
      console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnement annul√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur annulation abonnement:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU: V√©rifier la disponibilit√© d'un abonnement
   */
  async verifierDisponibiliteAbonnement(abonnementId, dureeHeure = 1) {
    try {
      console.log(`‚úîÔ∏è [ABONNEMENT_SERVICE] V√©rification disponibilit√© abonnement ID: ${abonnementId}`, { dureeHeure });
      
      if (!abonnementId || isNaN(parseInt(abonnementId))) {
        throw new Error('ID d\'abonnement invalide');
      }
      
      const response = await api.get(`/abonnements/${parseInt(abonnementId)}/availability`, {
        params: { dureeHeure: parseFloat(dureeHeure) }
      });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Disponibilit√© v√©rifi√©e:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur v√©rification disponibilit√©:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU: Consommer des heures d'un abonnement
   */
  async consommerHeures(abonnementId, dureeHeure, sessionId = null) {
    try {
      console.log(`‚è±Ô∏è [ABONNEMENT_SERVICE] Consommation heures abonnement ID: ${abonnementId}`, { dureeHeure, sessionId });
      
      if (!abonnementId || isNaN(parseInt(abonnementId))) {
        throw new Error('ID d\'abonnement invalide');
      }

      if (!dureeHeure || dureeHeure <= 0) {
        throw new Error('Dur√©e en heures invalide');
      }
      
      const response = await api.post(`/abonnements/${parseInt(abonnementId)}/consommer-heures`, {
        dureeHeure: parseFloat(dureeHeure),
        sessionId: sessionId ? parseInt(sessionId) : null
      });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Heures consomm√©es:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur consommation heures:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer un abonnement par ID avec d√©tails complets
   */
  async getAbonnementById(id) {
    try {
      console.log(`üìã [ABONNEMENT_SERVICE] R√©cup√©ration abonnement ID: ${id}`);
      
      if (!id || isNaN(parseInt(id))) {
        throw new Error('ID d\'abonnement invalide');
      }
      
      const response = await api.get(`/abonnements/${parseInt(id)}`);
      console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnement r√©cup√©r√©:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur r√©cup√©ration abonnement:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer les abonnements actifs d'un client sp√©cifique
   */
  async getAbonnementsActifsClient(clientId) {
    try {
      console.log(`üë§ [ABONNEMENT_SERVICE] R√©cup√©ration abonnements actifs client ID: ${clientId}`);
      
      if (!clientId || isNaN(parseInt(clientId))) {
        throw new Error('ID client invalide');
      }
      
      const response = await api.get(`/abonnements/client/${parseInt(clientId)}/actifs`);
      console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnements actifs r√©cup√©r√©s:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur r√©cup√©ration abonnements actifs:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU: R√©cup√©rer les sessions d'un abonnement
   */
  async getAbonnementSessions(abonnementId, options = {}) {
    try {
      console.log(`üìú [ABONNEMENT_SERVICE] R√©cup√©ration sessions abonnement ID: ${abonnementId}`, options);
      
      if (!abonnementId || isNaN(parseInt(abonnementId))) {
        throw new Error('ID d\'abonnement invalide');
      }
      
      const response = await api.get(`/abonnements/${parseInt(abonnementId)}/sessions`, {
        params: options
      });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Sessions r√©cup√©r√©es:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur r√©cup√©ration sessions:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ NOUVEAU: R√©cup√©rer les abonnements expirant bient√¥t
   */
  async getAbonnementsExpirantBientot(jours = 7) {
    try {
      console.log(`‚ö†Ô∏è [ABONNEMENT_SERVICE] R√©cup√©ration abonnements expirant dans ${jours} jours`);
      
      if (jours < 1 || jours > 90) {
        throw new Error('Nombre de jours doit √™tre entre 1 et 90');
      }
      
      const response = await api.get('/abonnements/expirations', {
        params: { jours: parseInt(jours) }
      });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Abonnements expirant r√©cup√©r√©s:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur r√©cup√©ration abonnements expirant:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer les statistiques des abonnements
   * @param {number} periode - P√©riode en jours pour les statistiques
   * @returns {Promise<Object>} Statistiques des abonnements
   */
  async getStatistiquesAbonnements(periode = 30) {
    try {
      console.log(`üìä [ABONNEMENT_SERVICE] R√©cup√©ration statistiques abonnements pour ${periode} jours`);
      
      if (periode < 1 || periode > 365) {
        throw new Error('P√©riode doit √™tre entre 1 et 365 jours');
      }
      
      const response = await api.get('/abonnements/statistiques', {
        params: { periode: parseInt(periode) }
      });
      console.log('‚úÖ [ABONNEMENT_SERVICE] Statistiques r√©cup√©r√©es:', response);
      
      return response;
    } catch (error) {
      console.error('‚ùå [ABONNEMENT_SERVICE] Erreur statistiques abonnements:', error);
      throw error;
    }
  }
}

export const abonnementService = new AbonnementService();
export default abonnementService;