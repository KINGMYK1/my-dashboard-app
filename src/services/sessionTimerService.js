class SessionTimerService {
  constructor() {
    this.activeTimers = new Map();
    this.notificationCallbacks = new Map();
    this.userPreferences = this.loadUserPreferences();
    this.expiredSessions = new Map(); // ‚úÖ NOUVEAU: Tracker les sessions expir√©es
  }

  // ‚úÖ NOUVEAU: M√©thode pour v√©rifier et terminer les sessions expir√©es en pause
  async checkAndTerminateExpiredPausedSessions() {
    console.log('üîç [TIMER] V√©rification sessions expir√©es en pause...');
    
    for (const [sessionId, sessionData] of this.expiredSessions) {
      try {
        // V√©rifier si la session est toujours en pause apr√®s l'expiration
        const sessionStatus = await this.getSessionStatusFromAPI(sessionId);
        
        if (sessionStatus && sessionStatus.estEnPause && sessionStatus.etatSession === 'EN_PAUSE') {
          const timeExpired = Date.now() - sessionData.expiredAt;
          const graceTimeMs = this.userPreferences.graceMinutes * 60 * 1000;
          
          if (timeExpired > graceTimeMs) {
            console.log(`‚è∞ [TIMER] Auto-terminaison session ${sessionId} (en pause depuis ${Math.floor(timeExpired/60000)}min)`);
            
            // Terminer automatiquement la session
            await this.autoTerminateExpiredSession(sessionId, sessionData);
            
            // Nettoyer le tracker
            this.expiredSessions.delete(sessionId);
          }
        } else {
          // La session n'est plus en pause, nettoyer le tracker
          this.expiredSessions.delete(sessionId);
        }
      } catch (error) {
        console.error(`‚ùå [TIMER] Erreur v√©rification session ${sessionId}:`, error);
      }
    }
  }

  // ‚úÖ NOUVEAU: Auto-terminer une session expir√©e
  async autoTerminateExpiredSession(sessionId, sessionData) {
    const callbacks = this.notificationCallbacks.get(sessionId);
    
    if (callbacks?.onAutoTerminate) {
      try {
        await callbacks.onAutoTerminate(sessionData.session, {
          reason: 'AUTO_TERMINATE_EXPIRED',
          message: 'Session termin√©e automatiquement - temps √©coul√©',
          modePaiement: this.userPreferences.defaultPaymentMethod || 'ESPECES',
          marquerCommePayee: this.userPreferences.autoMarkAsPaid || false,
          montantPaye: sessionData.session.coutCalculeProvisoire || 0,
          notes: `Session termin√©e automatiquement apr√®s ${this.userPreferences.graceMinutes} minutes de gr√¢ce`
        });
        
        console.log(`‚úÖ [TIMER] Session ${sessionId} termin√©e automatiquement`);
      } catch (error) {
        console.error(`‚ùå [TIMER] Erreur auto-terminaison session ${sessionId}:`, error);
        
        // En cas d'erreur, notifier l'utilisateur
        if (callbacks?.onAutoTerminateError) {
          callbacks.onAutoTerminateError(sessionData.session, error);
        }
      }
    }
  }

  // ‚úÖ CORRECTION: Gestion am√©lior√©e de l'expiration avec tracking
  async handleSessionExpired(session, callbacks) {
    const sessionId = session.id;
    console.log(`‚è∞ [TIMER] Session ${sessionId} expir√©e`);
    
    // Nettoyer le timer
    this.clearSessionTimer(sessionId);
    
    // Marquer comme expir√©e
    this.expiredSessions.set(sessionId, {
      session,
      expiredAt: Date.now(),
      callbacks
    });
    
    if (this.userPreferences.autoSuspendOnExpire) {
      console.log(`‚è∏Ô∏è [TIMER] Auto-suspension session ${sessionId}`);
      
      if (callbacks?.onAutoSuspend) {
        await callbacks.onAutoSuspend(session, 'Session expir√©e - mise en pause automatique');
        
        // D√©marrer le timer de gr√¢ce pour l'auto-terminaison
        this.startGraceTimer(sessionId);
      }
    } else if (callbacks?.onExpired) {
      callbacks.onExpired({
        sessionId,
        session,
        message: 'Session expir√©e'
      });
    }

    if (this.userPreferences.notificationSound) {
      this.playNotificationSound('expired');
    }
  }

  // ‚úÖ NOUVEAU: Timer de gr√¢ce pour l'auto-terminaison
  startGraceTimer(sessionId) {
    const graceTimeMs = this.userPreferences.graceMinutes * 60 * 1000;
    
    console.log(`‚è≥ [TIMER] D√©marrage timer de gr√¢ce pour session ${sessionId} (${this.userPreferences.graceMinutes}min)`);
    
    setTimeout(async () => {
      if (this.expiredSessions.has(sessionId)) {
        await this.checkAndTerminateExpiredPausedSessions();
      }
    }, graceTimeMs);
  }

  // ‚úÖ NOUVEAU: M√©thode pour obtenir le statut d'une session depuis l'API
  async getSessionStatusFromAPI(sessionId) {
    try {
      // Cette m√©thode doit √™tre inject√©e ou configur√©e selon votre architecture
      if (this.apiClient) {
        const response = await this.apiClient.get(`/sessions/${sessionId}/status`);
        return response.data;
      }
      return null;
    } catch (error) {
      console.error(`‚ùå [TIMER] Erreur r√©cup√©ration statut session ${sessionId}:`, error);
      return null;
    }
  }

  // ‚úÖ AM√âLIORATION: Pr√©f√©rences utilisateur √©tendues
  loadUserPreferences() {
    try {
      const saved = localStorage.getItem('sessionNotificationPreferences');
      const defaults = {
        warningMinutes: 1,
        graceMinutes: 5, // ‚úÖ NOUVEAU: Temps de gr√¢ce avant auto-terminaison
        autoSuspendOnExpire: true,
        autoTerminateAfterGrace: true, // ‚úÖ NOUVEAU: Auto-terminer apr√®s le temps de gr√¢ce
        allowExtension: true,
        notificationSound: true,
        autoTerminate: false,
        showNotifications: true,
        defaultPaymentMethod: 'ESPECES', // ‚úÖ NOUVEAU: Mode de paiement par d√©faut
        autoMarkAsPaid: false // ‚úÖ NOUVEAU: Marquer automatiquement comme pay√©
      };
      
      if (saved) {
        return { ...defaults, ...JSON.parse(saved) };
      }
      
      return defaults;
    } catch (error) {
      console.error('‚ùå [TIMER] Erreur chargement pr√©f√©rences:', error);
      return {
        warningMinutes: 1,
        graceMinutes: 5,
        autoSuspendOnExpire: true,
        autoTerminateAfterGrace: true,
        allowExtension: true,
        notificationSound: true,
        autoTerminate: false,
        showNotifications: true,
        defaultPaymentMethod: 'ESPECES',
        autoMarkAsPaid: false
      };
    }
  }

  // ‚úÖ NOUVEAU: Configurer l'API client pour les v√©rifications de statut
  setApiClient(apiClient) {
    this.apiClient = apiClient;
  }

  // ‚úÖ NOUVEAU: Nettoyer une session expir√©e (si reprise manuellement)
  clearExpiredSession(sessionId) {
    this.expiredSessions.delete(sessionId);
  }

  // ‚úÖ AM√âLIORATION: Nettoyage complet
  clearAllTimers() {
    for (const [sessionId] of this.activeTimers) {
      this.clearSessionTimer(sessionId);
    }
    this.expiredSessions.clear();
  }

  // ‚úÖ NOUVEAU: Obtenir les sessions expir√©es en attente
  getExpiredSessions() {
    return Array.from(this.expiredSessions.keys());
  }

  // ‚úÖ NOUVEAU: V√©rifier si une session est en attente d'auto-terminaison
  isSessionPendingAutoTermination(sessionId) {
    return this.expiredSessions.has(sessionId);
  }
}

const sessionTimerService = new SessionTimerService();
export default sessionTimerService;