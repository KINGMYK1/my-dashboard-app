import { api } from '../api/apiService';

class TransactionService {
  /**
   * ‚úÖ R√©cup√©rer les transactions en attente de paiement
   */
  async getTransactionsEnAttente(filters = {}) {
    try {
      console.log('üìã [TRANSACTION_SERVICE] R√©cup√©ration transactions en attente:', filters);
      
      const response = await api.get('/transactions/pending', { params: filters });
      return response;
    } catch (error) {
      console.error('‚ùå [TRANSACTION_SERVICE] Erreur transactions en attente:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ Mettre √† jour le paiement d'une transaction
   */
  async updatePayment(transactionId, paiementData) {
    try {
      console.log('üí∞ [TRANSACTION_SERVICE] Mise √† jour paiement:', transactionId, paiementData);
      
      const response = await api.patch(`/transactions/${transactionId}/payment`, paiementData);
      return response;
    } catch (error) {
      console.error('‚ùå [TRANSACTION_SERVICE] Erreur mise √† jour paiement:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ Annuler une transaction
   */
  async cancelTransaction(transactionId, raison) {
    try {
      console.log('‚ùå [TRANSACTION_SERVICE] Annulation transaction:', transactionId, raison);
      
      const response = await api.patch(`/transactions/${transactionId}/cancel`, { raison });
      return response;
    } catch (error) {
      console.error('‚ùå [TRANSACTION_SERVICE] Erreur annulation transaction:', error);
      throw error;
    }
  }

  /**
   * ‚úÖ R√©cup√©rer toutes les transactions avec filtres
   */
  async getAllTransactions(filters = {}) {
    try {
      console.log('üìã [TRANSACTION_SERVICE] R√©cup√©ration transactions:', filters);
      
      const response = await api.get('/transactions', { params: filters });
      return response;
    } catch (error) {
      console.error('‚ùå [TRANSACTION_SERVICE] Erreur r√©cup√©ration transactions:', error);
      throw error;
    }
  }
}

export const transactionService = new TransactionService();
export default transactionService;